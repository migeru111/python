並行処理と並列処理
    並行処理
        複数のタスクをある期間で切り替えて処理する方法。
        例としてタスクA実行→切り替え→タスクB実行...のように
        シングルコアのCPUでもできる。見かけ上は同時に動いてるように見える。
スレッド
    プログラムの処理の実行単位であって、プロセスよりも細かい単位。
    １個のプロセスは最低１個のスレッドがある。
    OSにとって１個のタスクは１個のプロセス。と考えると、スレッドはサブタスクと考えられる。
    複数のスレッド(サブタスク)を同時に処理することを考えると、
        １スレッドを持つプロセスを同時に立ち上げて処理する
        １プロセス内に複数スレッドを立ち上げて処理する
    の２つの対応がある
        複数プロセスで複数スレッドを立ち上げることはモデルが複雑になるため、推奨されない。

    プロセスにはOSから、メモリ空間が割り当てられる。各プロセス毎にメモリ空間が割り当てられ、別々のメモリ空間で動作する。
    スレッドはプロセス内で動き、OSからはリソースを割り当てられない。
    スレッドは、同じプロセスのメモリ空間を共有する。

GIL
    一般的な言語では、マルチコアのCPUを利用する際に、コア数のスレッドを同時実行できる。
    しかし、Cpythonでは、１つのインタプリタープロセスではある時刻において１つのスレッドしか実行されない。
    つまりCpythonのマルチスレッドは完全に並行処理となる。その理由がGIL(global interpreter lock)
    GILは一種の排他制御。

良さげな説明
    https://zenn.dev/kaitolucifer/articles/1f0eda0ca1ed52#4.-concurrent.futures

pythonの並行、並列処理関係のモジュール
    threading
        スレッドベースの並列処理
        内部で、_threadを使っている。
    multiprocessing
        マルチプロセスを作成できる
        GILによって、threadingだと並列処理ができないから、multipurocessingが実装されたと言われてる。
        クロスプラットフォームで、linux,windowsの両方で動く。
            linuxはfork()でサブプロセスを生成するが、windowsにはないため擬似fork()コマンドの処理を行っている。
    concurrent.futures
        threadingとmultiprocessingをさらにカプセル化して使いやすくしたモジュール。
        現在concurrentモジュールには、futuresしかない。
        futuresはFutureパターンのpython実装
            https://ja.wikipedia.org/wiki/Future_パターン

        以下２つのexecuterを選んで使用する
            threadPoolExecuter
                マルチスレッド(GILのために、並行処理)を実装できる
                マルチスレッドのため、スレッド間のデータ共有が高速
                I/Oバウンドなタスクに用いられる

            processPoolExecuter
                マルチプロセスを実装できる
                複数プロセスを作り出して処理を行うため、GILの制約を受けずマルチコアCPUの恩恵を受けたプログラムが実装可能
                CPUバウンドなタスクに用いられる

    参考
        threadPoolExecuter,processPoolExecuterの説明、
            https://note.com/mega_gorilla/n/n3fe706a9a950
        I/Oバウンド、CPUバウンド
            https://yohei-a.hatenablog.jp/entry/20120205/1328432481
            https://tech.nkhn37.net/pythoni-parallel-process-io-cpu-bound/


